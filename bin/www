#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const { userAdd } = require('../controllers/UserController');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */
// socket连接

const io = require('socket.io')(server);
// 连接上socket的用户数量
var hasUser = [];

io.on('connection', function (socket) {
  console.log('有一个客户端连接上了服务器,socketId号为'+ socket.id)
  socket.join('2')
  console.log('加入的房间',socket.rooms)
  socket.on('userId',function (data){
    console.log('发送的id'+data)
    hasUser.push({
      socketId:socket.id,
      userId:data
    })
  })
  
  // 绑定监听, 接收客户端发送的消息

  socket.on("private message", ({ content, to }) => {
    socket.emit('notice','开启了私聊')
    console.log('接收到客户端发来的消息：'+content + '对象为:'+to)
    socket.to(to).emit("private message", {
      content,
      from: socket.id,
    });
    
  });


  socket.on('sendMsg', function (data) {
    console.log('发送消息Id:' + socket.id)
    console.log('服务器接收到客户端发送的消息', data)
    // 处理数据
    // 发固定人发送消息
    
    // 如果有接收id说明是双人聊天
    
    // 服务器向客户端发送消息
    
    io.emit('receiveMsg', data)
  })
})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
